generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_CONNECTION_URI")
}

enum InstanceConnectionStatus {
  OPEN
  CLOSE
  CONNECTING
}

enum DeviceMessage {
  IOS
  ANDROID
  WEB
  UNKNOWN
  DESKTOP
}

enum SessionStatus {
  OPENED
  CLOSED
  PAUSED
}

enum TriggerType {
  ALL
  KEYWORD
  NONE
  ADVANCED
}

enum TriggerOperator {
  CONTAINS
  EQUALS
  STARTS_WITH
  ENDS_WITH
  REGEX
}

enum OpenaiBotType {
  ASSISTANT
  CHAT_COMPLETION
}

enum DifyBotType {
  CHAT_BOT
  TEXT_GENERATOR
  AGENT
  WORKFLOW
}

model Instance {
  id                      String                   @id @default(cuid())
  name                    String                   @unique
  connectionStatus        InstanceConnectionStatus @default(OPEN)
  ownerJid                String?
  profileName             String?
  profilePicUrl           String?
  integration             String?
  number                  String?
  businessId              String?
  token                   String?
  clientName              String?
  disconnectionReasonCode Int?
  disconnectionObject     Json?
  disconnectionAt         DateTime?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  Chat                    Chat[]
  Contact                 Contact[]
  Message                 Message[]
  Webhook                 Webhook?
  Chatwoot                Chatwoot?
  Label                   Label[]
  Proxy                   Proxy?
  Setting                 Setting?
  Rabbitmq                Rabbitmq?
  Nats                    Nats?
  Sqs                     Sqs?
  Kafka                   Kafka?
  Websocket               Websocket?
  Typebot                 Typebot[]
  Session                 Session?
  MessageUpdate           MessageUpdate[]
  TypebotSetting          TypebotSetting?
  Media                   Media[]
  OpenaiCreds             OpenaiCreds[]
  OpenaiBot               OpenaiBot[]
  OpenaiSetting           OpenaiSetting?
  Template                Template[]
  Dify                    Dify[]
  DifySetting             DifySetting?
  IntegrationSession      IntegrationSession[]
  EvolutionBot            EvolutionBot[]
  EvolutionBotSetting     EvolutionBotSetting?
  Flowise                 Flowise[]
  FlowiseSetting          FlowiseSetting?
  Pusher                  Pusher?
  N8n                     N8n[]
  N8nSetting              N8nSetting[]
  Evoai                   Evoai[]
  EvoaiSetting            EvoaiSetting?
}

model Session {
  id        String   @id @default(cuid())
  sessionId String   @unique
  creds     String?
  createdAt DateTime @default(now())
  Instance  Instance @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model Chat {
  id             String    @id @default(cuid())
  remoteJid      String
  name           String?
  labels         Json?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  Instance       Instance  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId     String
  unreadMessages Int       @default(0)

  @@index([instanceId])
  @@index([remoteJid])
}

model Contact {
  id            String   @id @default(cuid())
  remoteJid     String
  pushName      String?
  profilePicUrl String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  Instance      Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId    String

  @@unique([remoteJid, instanceId])
  @@index([remoteJid])
}

model Message {
  id             String    @id @default(cuid())
  key            Json
  pushName       String?
  participant    String?
  messageType    String
  message        Json
  contextInfo    Json?
  source         DeviceMessage
  messageTimestamp Int
  chatwootMessageId Int?
  chatwootInboxId Int?
  chatwootConversationId Int?
  chatwootContactInboxSourceId String?
  chatwootIsRead Boolean?
  Instance       Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId     String
  MessageUpdate  MessageUpdate[]
  Media          Media?
  webhookUrl     String?
  status         String?
  sessionId      String?
  session        IntegrationSession? @relation(fields: [sessionId], references: [id])

  @@index([instanceId])
}

model Media {
  id         String    @id @default(cuid())
  fileName   String
  type       String
  mimetype   String
  createdAt  DateTime  @default(now())
  Message    Message   @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId  String    @unique
  Instance   Instance  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId String
}
